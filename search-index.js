var searchIndex = {};
searchIndex["pandoc"] = {"doc":"API that wraps the pandoc command line tool","items":[[3,"Pandoc","pandoc","the argument builder",null,null],[4,"OutputFormatExt","","allow to choose an output format with or without extensions",null,null],[13,"Fmt","","a predefined pandoc format",0,null],[13,"FmtExt","","allows formats like markdown+pipetables+gridtables",0,null],[4,"TrackChanges","","",null,null],[13,"Accept","","",1,null],[13,"Reject","","",1,null],[13,"All","","",1,null],[4,"EmailObfuscation","","",null,null],[13,"None","","",2,null],[13,"Javascript","","",2,null],[13,"References","","",2,null],[4,"PandocOption","","",null,null],[13,"To","","-t FORMAT  --to=FORMAT",3,null],[13,"DataDir","","--data-dir=DIRECTORY",3,null],[13,"Strict","","--strict",3,null],[13,"ParseRaw","","-R --parse-raw",3,null],[13,"Smart","","-S --smart",3,null],[13,"OldDashes","","--old-dashes",3,null],[13,"BaseHeaderLevel","","--base-header-level=NUMBER",3,null],[13,"IndentedCodeClasses","","--indented-code-classes=STRING",3,null],[13,"Filter","","-F PROGRAM --filter=PROGRAM",3,null],[13,"Normalize","","--normalize",3,null],[13,"PreserveTabs","","-p --preserve-tabs",3,null],[13,"TabStop","","--tab-stop=NUMBER",3,null],[13,"TrackChanges","","--track-changes=accept|reject|all",3,null],[13,"ExtractMedia","","--extract-media=PATH",3,null],[13,"Standalone","","-s --standalone",3,null],[13,"Template","","--template=FILENAME",3,null],[13,"Meta","","-M KEY[:VALUE] --metadata=KEY[:VALUE]",3,null],[13,"Var","","-V KEY[:VALUE] --variable=KEY[:VALUE]",3,null],[13,"PrintDefaultTemplate","","-D FORMAT --print-default-template=FORMAT",3,null],[13,"PrintDefaultDataFile","","--print-default-data-file=FILE",3,null],[13,"NoWrap","","--no-wrap",3,null],[13,"Columns","","--columns=NUMBER",3,null],[13,"TableOfContents","","--toc, --table-of-contents",3,null],[13,"TableOfContentsDepth","","--toc-depth=NUMBER",3,null],[13,"NoHighlight","","--no-highlight",3,null],[13,"HighlightStyle","","--highlight-style=STYLE",3,null],[13,"IncludeInHeader","","-H FILENAME --include-in-header=FILENAME",3,null],[13,"IncludeBeforeBody","","-B FILENAME --include-before-body=FILENAME",3,null],[13,"IncludeAfterBody","","-A FILENAME --include-after-body=FILENAME",3,null],[13,"SelfContained","","--self-contained",3,null],[13,"Offline","","--offline",3,null],[13,"Html5","","-5 --html5",3,null],[13,"HtmlQTags","","--html-q-tags",3,null],[13,"Ascii","","--ascii",3,null],[13,"ReferenceLinks","","--reference-links",3,null],[13,"AtxHeaders","","--atx-headers",3,null],[13,"Chapters","","--chapters",3,null],[13,"NumberSections","","-N --number-sections",3,null],[13,"NumberOffset","","--number-offset=NUMBERS",3,null],[13,"NoTexLigatures","","--no-tex-ligatures",3,null],[13,"Listings","","--listings",3,null],[13,"Incremental","","-i --incremental",3,null],[13,"SlideLevel","","--slide-level=NUMBER",3,null],[13,"SectionDivs","","--section-divs",3,null],[13,"DefaultImageExtension","","--default-image-extension=extension",3,null],[13,"EmailObfuscation","","--email-obfuscation=none|javascript|references",3,null],[13,"IdPrefix","","--id-prefix=STRING",3,null],[13,"TitlePrefix","","-T STRING --title-prefix=STRING",3,null],[13,"Css","","-c URL --css=URL",3,null],[13,"ReferenceOdt","","--reference-odt=FILENAME",3,null],[13,"ReferenceDocx","","--reference-docx=FILENAME",3,null],[13,"EpubStylesheet","","--epub-stylesheet=FILENAME",3,null],[13,"EpubCoverImage","","--epub-cover-image=FILENAME",3,null],[13,"EpubMetadata","","--epub-metadata=FILENAME",3,null],[13,"EpubEmbedFont","","--epub-embed-font=FILE",3,null],[13,"EpubChapterLevel","","--epub-chapter-level=NUMBER",3,null],[13,"LatexEngine","","--latex-engine=PROGRAM",3,null],[13,"LatexEngineOpt","","--latex-engine-opt=STRING",3,null],[13,"Bibliography","","--bibliography=FILE",3,null],[13,"Csl","","--csl=FILE",3,null],[13,"CitationAbbreviations","","--citation-abbreviations=FILE",3,null],[13,"Natbib","","--natbib",3,null],[13,"Biblatex","","--biblatex",3,null],[13,"LatexMathML","","-m[URL] --latexmathml[=URL], --asciimathml[=URL]",3,null],[13,"AsciiMathML","","--asciimathml[=URL]",3,null],[13,"MathML","","--mathml[=URL]",3,null],[13,"MimeTex","","--mimetex[=URL]",3,null],[13,"WebTex","","--webtex[=URL]",3,null],[13,"JsMath","","--jsmath[=URL]",3,null],[13,"MathJax","","--mathjax[=URL]",3,null],[13,"Katex","","--katex[=URL]",3,null],[13,"KatexStylesheet","","--katex-stylesheet=URL",3,null],[13,"GladTex","","-gladtex",3,null],[13,"Trace","","--trace",3,null],[13,"DumpArgs","","--dump-args",3,null],[13,"IgnoreArgs","","--ignore-args",3,null],[13,"Verbose","","--verbose",3,null],[4,"DocumentClass","","equivalent to the latex document class",null,null],[13,"Article","","compact form of report",4,null],[13,"Report","","abstract + chapters + custom page for title, abstract and toc",4,null],[13,"Book","","no abstract",4,null],[4,"OutputFormat","","typesafe access to -t FORMAT, -w FORMAT, --to=FORMAT, --write=FORMAT",null,null],[13,"Native","","native Haskell",5,null],[13,"Json","","JSON version of native AST",5,null],[13,"Plain","","Plain text",5,null],[13,"Markdown","","pandoc’s extended markdown",5,null],[13,"MarkdownStrict","","original unextended markdown",5,null],[13,"MarkdownPhpextra","","PHP Markdown extra extended markdown",5,null],[13,"MarkdownGithub","","github extended markdown",5,null],[13,"Commonmark","","CommonMark markdown",5,null],[13,"Rst","","reStructuredText",5,null],[13,"Html","","XHTML 1",5,null],[13,"Html5","","HTML 5",5,null],[13,"Latex","","LaTeX",5,null],[13,"Beamer","","LaTeX beamer slide show",5,null],[13,"Context","","ConTeXt",5,null],[13,"Man","","Groff man",5,null],[13,"MediaWiki","","MediaWiki markup",5,null],[13,"Dokuwiki","","DokuWiki markup",5,null],[13,"Textile","","Textile",5,null],[13,"Org","","Emacs Org-Mode",5,null],[13,"Texinfo","","GNU Texinfo",5,null],[13,"Opml","","OPML",5,null],[13,"Docbook","","DocBook",5,null],[13,"OpenDocument","","Open Document",5,null],[13,"Odt","","OpenOffice text document",5,null],[13,"Docx","","Word docx",5,null],[13,"Haddock","","Haddock markup",5,null],[13,"Rtf","","Rich text format",5,null],[13,"Epub","","EPUB v2 book",5,null],[13,"Epub3","","EPUB v3",5,null],[13,"Fb2","","FictionBook2 e-book",5,null],[13,"Asciidoc","","AsciiDoc",5,null],[13,"Icml","","InDesign ICML",5,null],[13,"Slidy","","Slidy HTML and javascript slide show",5,null],[13,"Slideous","","Slideous HTML and javascript slide show",5,null],[13,"Dzslides","","DZSlides HTML5 + javascript slide show",5,null],[13,"Revealjs","","reveal.js HTML5 + javascript slide show",5,null],[13,"S5","","S5 HTML and javascript slide show",5,null],[13,"Lua","","the path of a custom lua writer (see Custom writers)",5,null],[4,"InputFormat","","typesafe access to -f FORMAT, -r FORMAT, --from=FORMAT, --read=FORMAT",null,null],[13,"Native","","native Haskell",6,null],[13,"Json","","JSON version of native AST",6,null],[13,"Markdown","","pandoc’s extended markdown",6,null],[13,"MarkdownStrict","","original unextended markdown",6,null],[13,"MarkdownPhpextra","","PHP Markdown extra extended markdown",6,null],[13,"MarkdownGithub","","github extended markdown",6,null],[13,"Commonmark","","CommonMark markdown",6,null],[13,"Textile","","Textile",6,null],[13,"Rst","","reStructuredText",6,null],[13,"Html","","HTML",6,null],[13,"DocBook","","DocBook",6,null],[13,"T2t","","txt2tags",6,null],[13,"Docx","","Word docx",6,null],[13,"Epub","","EPUB",6,null],[13,"Opml","","OPML",6,null],[13,"Org","","Emacs Org-Mode",6,null],[13,"MediaWiki","","MediaWiki markup",6,null],[13,"Twiki","","TWiki markup",6,null],[13,"Haddock","","Haddock markup",6,null],[13,"Latex","","LaTeX",6,null],[4,"MarkdownExtension","","",null,null],[13,"EscapedLineBreaks","","",7,null],[13,"BlankBeforeHeader","","",7,null],[13,"HeaderAttributes","","",7,null],[13,"AutoIdentifiers","","",7,null],[13,"ImplicitHeaderReferences","","",7,null],[13,"BlankBeforeBlockQuote","","",7,null],[13,"FencedCodeBlocks","","",7,null],[13,"BacktickCodeBlocks","","",7,null],[13,"FencedCodeAttributes","","",7,null],[13,"LineBlocks","","",7,null],[13,"FancyLists","","",7,null],[13,"Startnum","","",7,null],[13,"DefinitionLists","","",7,null],[13,"ExampleLists","","",7,null],[13,"TableCaptions","","",7,null],[13,"SimpleTables","","",7,null],[13,"MultilineTables","","",7,null],[13,"GridTables","","",7,null],[13,"PipeTables","","",7,null],[13,"PandocTitleBlock","","",7,null],[13,"YamlMetadataBlock","","",7,null],[13,"AllSymbolsEscapable","","",7,null],[13,"IntrawordUnderscores","","",7,null],[13,"Strikeout","","",7,null],[13,"Superscript","","",7,null],[13,"Subscript","","",7,null],[13,"InlineCodeAttributes","","",7,null],[13,"TexMathDollars","","",7,null],[13,"RawHtml","","",7,null],[13,"MarkdownInHtmlBlocks","","",7,null],[13,"NativeDivs","","",7,null],[13,"NativeSpans","","",7,null],[13,"RawTex","","",7,null],[13,"LatexMacros","","",7,null],[13,"ShortcutReferenceLinks","","",7,null],[13,"ImplicitFigures","","",7,null],[13,"Footnotes","","",7,null],[13,"InlineNotes","","",7,null],[13,"Citations","","",7,null],[13,"ListsWithoutPrecedingBlankline","","",7,null],[13,"HardLineBreaks","","",7,null],[13,"IgnoreLineBreaks","","",7,null],[13,"TexMathSingleBackslash","","",7,null],[13,"TexMathDoubleBackslash","","",7,null],[13,"MarkdownAttribute","","",7,null],[13,"MmdTitleBlock","","",7,null],[13,"Abbreviations","","",7,null],[13,"AutolinkBareUris","","",7,null],[13,"AsciiIdentifiers","","",7,null],[13,"LinkAttributes","","",7,null],[13,"MmdHeaderIdentifiers","","",7,null],[13,"CompactDefinitionLists","","",7,null],[4,"PandocError","","Possible errors that can occur before or during pandoc execution",null,null],[13,"IoErr","","some kind of IO-Error",8,null],[13,"Err","","pandoc execution failed, look at the stderr output",8,null],[13,"NoOutputSpecified","","forgot to specify an output file",8,null],[13,"NoInputSpecified","","forgot to specify any input files",8,null],[13,"PandocNotFound","","pandoc executable not found",8,null],[5,"new","","does nothing useful, simply gives you a builder object\nconvenience function so you can call pandoc::new()",null,{"inputs":[],"output":{"name":"pandoc"}}],[6,"URL","","",null,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"clone","","",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"pandoc"}}],[11,"new","","does nothing useful, simply gives you a builder object",9,{"inputs":[],"output":{"name":"pandoc"}}],[11,"add_latex_path_hint","","this path is searched first for latex, then PATH, then some hardcoded hints",9,null],[11,"add_pandoc_path_hint","","this path is searched first for pandoc, then PATH, then some hardcoded hints",9,null],[11,"set_doc_class","","sets or overwrites the document-class",9,null],[11,"set_output_format","","sets or overwrites the output format",9,null],[11,"set_input_format","","sets or overwrites the input format",9,null],[11,"add_input","","adds more input files, the order is relevant\nthe order of adding the files is the order in which they are processed",9,null],[11,"set_output","","sets or overwrites the output filename",9,null],[11,"set_bibliography","","filename of the bibliography database",9,null],[11,"set_csl","","filename of a citation style file",9,null],[11,"set_toc","","enable table of contents",9,null],[11,"set_chapters","","enable chapters",9,null],[11,"set_number_sections","","prefix section names with indices x.y.z",9,null],[11,"set_latex_template","","set a custom latex template",9,null],[11,"set_slide_level","","sets the header level that causes a new slide to be generated",9,null],[11,"set_variable","","set a custom variable\ntry not to use this, there are convenience functions for most things",9,null],[11,"add_filter","","closures that take a json string and return a json string",9,null],[11,"add_option","","",9,null],[11,"generate_latex_template","","generate a latex template from the given settings\nthis function can panic in a lot of places",9,null],[11,"execute","","actually execute pandoc",9,null],[11,"from","","",8,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",8,null]],"paths":[[4,"OutputFormatExt"],[4,"TrackChanges"],[4,"EmailObfuscation"],[4,"PandocOption"],[4,"DocumentClass"],[4,"OutputFormat"],[4,"InputFormat"],[4,"MarkdownExtension"],[4,"PandocError"],[3,"Pandoc"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[3,"Dedup","itertools","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both\nrun out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until\none of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single\nitem to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple\nitems in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"GroupBy","","An iterator adaptor that groups iterator elements. Consecutive elements\nthat map to the same key (“runs”), are returned as the iterator elements.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator\nfor each iteration.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","An iterator adaptor that allows the user to peek at multiple `.next()`\nvalues without advancing itself.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"MendSlices","","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"Combinations","","An iterator to iterate through all the combinations of pairs in a `Clone`-able iterator.",null,null],[3,"CombinationsN","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatDefault","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"ChunksLazy","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupByLazy","","`GroupByLazy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",null,null],[3,"ISlice","","An iterator adaptor that yields a subset (a slice) of the base iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order.\nIf all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"Linspace","","An iterator of a sequence of evenly spaced floats.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling\nmissing elements using a closure.",null,null],[3,"RcIter","","A wrapper for `Rc&lt;RefCell&lt;I&gt;&gt;`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",0,null],[3,"RepeatN","","An iterator that repeats an element exactly *n* times.",null,null],[3,"RepeatCall","","An iterator source that produces elements indefinitely by calling\na given closure.",null,null],[3,"Unfold","","`Unfold` is a general iterator builder: it has a mutable state value,\nand a closure with access to the state that produces the next value.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",1,null],[3,"Stride","","An iterator similar to the slice iterator, but with a certain number of steps\n(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.",null,null],[3,"ZipSlices","","An iterator which iterates two slices simultaneously.",null,null],[4,"Diff","","A type returned by the [`diff_with`](./fn.diff_with.html) function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator&#39;s remaining elements\nstarting with the first mis-match.",2,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",2,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",2,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\nmore detail.",null,null],[13,"NoElements","","Empty iterator",3,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",3,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger\nthan the second",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`.\nContains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the parameter iterator.",4,null],[4,"Partition","","Classifies the result of the `.partition_map()` closure into a\npartition.",null,null],[13,"Left","","Classify into the left partition.",5,null],[13,"Right","","Classify into the right partition.",5,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",6,null],[13,"Done","","Fold is complete and will return this value",6,null],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and\nreturns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"option"}}],[5,"linspace","","Return an iterator of evenly spaced floats.",null,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"linspace"}}],[5,"equal","","Return `true` if both iterators produce equal sequences\n(elements pairwise equal and sequences of the same length),\n`false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same\nsemantics as *equal(a, b)*.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements\nthat map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[11,"clone","","",7,null],[11,"new","","Creat a new `Interleave` iterator.",7,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"next","","",7,null],[11,"clone","","",8,null],[11,"new","","Create a new `InterleaveShortest` iterator.",8,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"clone","","",9,null],[11,"new","","Iterator element type is `A`",9,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"with_value","","Create a `PutBack` along with the `value` to put back.",9,{"inputs":[{"name":"item"},{"name":"i"}],"output":{"name":"self"}}],[11,"into_parts","","Split the `PutBack` into its parts.",9,null],[11,"put_back","","Put back a single value to the front of the iterator.",9,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"new","","Iterator element type is `A`",10,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"put_back","","Puts x in front of the iterator.\nThe values are yielded in order.",10,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"new","","Create a new cartesian product iterator",11,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"self"}}],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"clone","","",12,null],[11,"new","","Create a new Batching iterator.",12,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"batching"}}],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"clone","","",13,null],[11,"new","","Create a new `GroupBy` iterator.",13,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"clone","","",14,null],[11,"new","","Create a `Step` iterator.",14,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"clone","","",15,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"clone","","",16,null],[11,"next","","",16,null],[11,"size_hint","","",16,null],[11,"clone","","",17,null],[11,"new","","Create a `MultiPeek` iterator.",17,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn&#39;t\nadvance itself. `.peek()` can be called multiple times, to peek\nfurther ahead.",17,null],[11,"next","","",17,null],[11,"size_hint","","",17,null],[11,"clone","","",18,null],[11,"new","","Create a new `Coalesce`.",18,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",18,null],[11,"size_hint","","",18,null],[11,"clone","","",19,null],[11,"new","","Create a new `Dedup`.",19,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",19,null],[11,"size_hint","","",19,null],[11,"clone","","",20,null],[11,"new","","Create a new `MendSlices`.",20,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",20,null],[11,"size_hint","","",20,null],[11,"new","","Create a new `TakeWhileRef` from a reference to clonable iterator.",21,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",21,null],[11,"size_hint","","",21,null],[11,"clone","","",22,null],[11,"new","","Create a new `WhileSome&lt;I&gt;`.",22,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",22,null],[11,"size_hint","","",22,null],[11,"clone","","",23,null],[11,"new","","Create a new `Combinations` from a clonable iterator.",23,{"inputs":[{"name":"i"}],"output":{"name":"combinations"}}],[11,"next","","",23,null],[11,"size_hint","","",23,null],[11,"new","","Create a new `CombinationsN` from a clonable iterator.",24,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"next","","",24,null],[11,"clone","","",25,null],[11,"new","","Create a new `UniqueBy` iterator.",25,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"next","","",26,null],[11,"size_hint","","",26,null],[11,"clone","","",26,null],[11,"new","","Create a new `Flatten` iterator.",27,{"inputs":[{"name":"i"}],"output":{"name":"flatten"}}],[11,"next","","",27,null],[11,"next_back","","",27,null],[11,"clone","","",27,null],[0,"free","","Free functions that create iterator adaptors or call iterator methods.",null,null],[5,"enumerate","itertools::free","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable&#39;s elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"clone","itertools","",28,null],[11,"fmt","","",29,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"next","","",30,null],[11,"drop","","",31,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"drop","","",33,null],[11,"next","","",33,null],[11,"clone","","",34,null],[11,"new","","Create a new Intersperse iterator",34,{"inputs":[{"name":"i"},{"name":"item"}],"output":{"name":"self"}}],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"clone","","",35,null],[11,"new","","Create a new **ISlice**.",35,{"inputs":[{"name":"i"},{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"clone","","",36,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"fmt","","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"next_back","","",37,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option`\nhas variant `None` if and only if the `MinMaxResult` has variant\n`NoElements`. Otherwise variant `Some(x, y)` is returned where `x &lt;= y`.\nIf `MinMaxResult` has variant `OneElement(x)`, performing this operation\nwill make one clone of `x`.",3,null],[0,"misc","","A module of helper traits and iterators that are not intended to be used\ndirectly.",null,null],[3,"FlatTuples","itertools::misc","A helper iterator that maps an iterator of tuples like\n`((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[8,"IntoIteratorTuple","","Apply `IntoIterator` on each element of a tuple.",null,null],[16,"Output","","Tuple of values that implement `Iterator`.",38,null],[10,"into_iterator_tuple","","Return a tuple of iterators.",38,null],[8,"AppendTuple","","A helper trait for (x, y, z) ++ w =&gt; (x, y, z, w),\nused for implementing `iproduct!`.",null,null],[16,"Result","","Resulting tuple type",39,null],[10,"append","","“Append” value `x` to a tuple.",39,null],[8,"GenericRange","","`GenericRange` is implemented by Rust&#39;s built-in range types, produced\nby range syntax like `a..`, `..b` or `c..d`.",null,null],[8,"ToFloat","","Helper trait to convert usize to floating point type.",null,null],[8,"MendSlice","","A trait for items that can *maybe* be joined together.",null,null],[8,"Slice","","A helper trait to let `ZipSlices` accept both `&amp;[T]` and `&amp;mut [T]`.",null,null],[16,"Item","","The type of a reference to the slice&#39;s elements",40,null],[11,"clone","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next_back","","",41,null],[11,"start","core::ops","",42,null],[11,"end","","",43,null],[11,"start","","",44,null],[11,"end","","",44,null],[11,"clone","itertools","",45,null],[11,"new","","Create a new **PadUsing** iterator.",45,{"inputs":[{"name":"i"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"new","","Create a new RcIter.",0,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"new","","Create a new **RepeatN** with **n** repetitions.",46,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"new","","Create a new `RepeatCall` from a closure.",47,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"next_back","","",47,null],[11,"clone","","",1,null],[11,"new","","Creates a new iterator with the specified closure as the &quot;iterator\nfunction&quot; and an initial state to eventually pass to the closure",1,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",1,null],[11,"size_hint","","",1,null],[0,"size_hint","","Arithmetic on **Iterator** *.size_hint()* values.",null,null],[5,"add","itertools::size_hint","Add **SizeHint** correctly.",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"add_scalar","","Add **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"sub_scalar","","Sbb **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul_scalar","","Multiply **x** correctly with a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul","","Multiply **SizeHint** correctly",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"max","","Return the maximum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"min","","Return the minimum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[6,"SizeHint","","**SizeHint** is the return type of **Iterator::size_hint()**.",null,null],[11,"from_ptr_len","itertools","Create a Stride iterator from a raw pointer.",48,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",49,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",48,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",48,{"inputs":[{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",48,null],[11,"len","","Return the number of elements in the iterator.",48,null],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",48,null],[11,"next","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"index","","Return a reference to the element at a given index.",48,null],[11,"fmt","","",48,null],[11,"len","","",48,null],[11,"get_unchecked","","",48,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",49,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",49,{"inputs":[{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",49,null],[11,"len","","Return the number of elements in the iterator.",49,null],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"index","","Return a reference to the element at a given index.",49,null],[11,"fmt","","",49,null],[11,"len","","",49,null],[11,"get_unchecked","","",49,null],[11,"clone","","",48,null],[11,"get_mut","","Return a mutable reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",49,null],[11,"index_mut","","Return a mutable reference to the element at a given index.",49,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"clone","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"clone","","",52,null],[11,"new","","Create a new `ZipLongest` iterator.",52,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"ziplongest"}}],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"clone","","",53,null],[11,"new","","Create a new `Zip` from a tuple of iterators.",53,{"inputs":[{"name":"t"}],"output":{"name":"zip"}}],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"clone","","",54,null],[11,"new","","Create a new `ZipSlices` from slices `a` and `b`.",54,null],[11,"from_slices","","Create a new `ZipSlices` from slices `a` and `b`.",54,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"next","","",54,null],[11,"size_hint","","",54,null],[11,"next_back","","",54,null],[11,"len","","",54,null],[11,"get_unchecked","","",54,null],[6,"MapFn","","The function pointer map iterator created with `.map_fn()`.",null,null],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both\nrun out.",55,null],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",55,null],[11,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",55,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.",55,null],[11,"zip_eq","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of elements.",55,null],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",55,null],[11,"group_by","","Group iterator elements. Consecutive elements that map to the same key (“runs”),\nare returned as the iterator elements of `GroupBy`.",55,null],[11,"group_by_lazy","","Return an iterable that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.",55,null],[11,"chunks_lazy","","Return an iterable that can chunk the iterator.",55,null],[11,"tee","","Split into an iterator pair that both yield all elements from\nthe original iterator.",55,null],[11,"slice","","Return a sliced iterator.",55,null],[11,"into_rc","","Return an iterator inside a `Rc&lt;RefCell&lt;_&gt;&gt;` wrapper.",55,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.",55,null],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",55,null],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order.\nThis is much like `.merge()` but allows for a custom ordering.",55,null],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by\nmerging them in ascending order.",55,null],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.",55,null],[11,"multipeek","","Return an iterator adapter that allows peeking multiple values.",55,null],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements.",55,null],[11,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",55,null],[11,"unique","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.",55,null],[11,"unique_by","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.",55,null],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",55,null],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `f` returns `true`.",55,null],[11,"while_some","","Return an iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",55,null],[11,"combinations","","Return an iterator adaptor that iterates over the combinations of\nthe elements from an iterator.",55,null],[11,"combinations_n","","Return an iterator adaptor that iterates over the `n`-length combinations of\nthe elements from an iterator.",55,null],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.",55,null],[11,"flatten","","Unravel a nested iterator.",55,null],[11,"map_fn","","Like regular `.map()`, specialized to using a simple function pointer instead,\nso that the resulting `Map` iterator value can be cloned.",55,null],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",55,null],[11,"dropn","","Consume the first `n` elements of the iterator eagerly.",55,null],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.",55,null],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.",55,null],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",55,null],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`,\nfor convenience.",55,null],[11,"set_from","","Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.",55,null],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",55,null],[11,"format_default","","Format all iterator elements, separated by `sep`.",55,null],[11,"format","","Format all iterator elements, separated by `sep`.",55,null],[11,"fold_results","","Fold `Result` values from an iterator.",55,null],[11,"fold_options","","Fold `Option` values from an iterator.",55,null],[11,"fold1","","Accumulator of the elements in the iterator.",55,null],[11,"fold_while","","An iterator adaptor that applies a function, producing a single, final value.",55,null],[11,"is_empty_hint","","Tell if the iterator is empty or not according to its size hint.\nReturn `None` if the size hint does not tell, or return a `Some`\nvalue with the emptiness if it&#39;s possible to tell.",55,null],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",55,null],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",55,null],[11,"sort_by","","**Deprecated:** renamed to `.sorted_by()`",55,null],[11,"partition_map","","Collect all iterator elements into one of two\npartitions. Unlike `Iterator::partition`, each partition may\nhave a distinct type.",55,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",55,null],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by\nthe specified function.",55,null],[14,"iproduct!","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip!","","Create an iterator running multiple iterators in lockstep.",null,null]],"paths":[[3,"RcIter"],[3,"Unfold"],[4,"Diff"],[4,"MinMaxResult"],[4,"EitherOrBoth"],[4,"Partition"],[4,"FoldWhile"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"GroupBy"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"MultiPeek"],[3,"Coalesce"],[3,"Dedup"],[3,"MendSlices"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"Combinations"],[3,"CombinationsN"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"FormatDefault"],[3,"Format"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"ISlice"],[3,"KMerge"],[3,"Linspace"],[8,"IntoIteratorTuple"],[8,"AppendTuple"],[8,"Slice"],[3,"FlatTuples"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"PadUsing"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Stride"],[3,"StrideMut"],[3,"Tee"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[3,"ZipSlices"],[8,"Itertools"]]};
initSearch(searchIndex);
